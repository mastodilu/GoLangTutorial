package main

import (
	"encoding/json"
	"fmt"
)

type person struct {
	First string
	Last  string
	Age   int
}

// https://mholt.github.io/json-to-go/
type AutoGenerated []struct {
	First string `json:"First"`
	Last  string `json:"Last"`
	Age   int    `json:"Age"`
}

func marshalExample() {
	// üí• MARSHAL: da struct a json

	fmt.Println("Marshal example...\n")
	jamesBond := person{
		First: "james",
		Last:  "bond",
		Age:   32,
	}

	matteo := person{
		First: "matteo",
		Last:  "dilu",
		Age:   25,
	}

	people := []person{jamesBond, matteo}
	fmt.Println(people)

	// üí•legge people e lo salva in formato json dentro alla variabile bs (byte slice) come slice di bytes
	// ‚ùó se non stampa nulla √® perch√® i campi della struct sono minuscoli!!
	bs, err := json.MarshalIndent(people, "", "   ")
	if err != nil {
		panic(err)
	}
	fmt.Printf("%+v\n", string(bs))
	fmt.Println("------------------------------------------------------")
}

func unmarshalExample() {
	// üí• UNMARSHAL: da json a struct
	fmt.Println("Unmarhsla example...\n")
	rawData := `[{"First": "james", "Last": "bond", "Age": 32 }, { "First": "matteo", "Last": "dilu", "Age": 25 } ]`
	bs := []byte(rawData)

	var people []person
	err := json.Unmarshal(bs, &people)
	if err != nil {
		panic(err)
	}
	fmt.Println(people)
	fmt.Println("------------------------------------------------------")
}

func main() {
	marshalExample()
	unmarshalExample()
}
